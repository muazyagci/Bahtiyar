Index: src/test/java/com/Bahtiyar/utilities/BrowserUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.Bahtiyar.utilities;\r\n\r\nimport org.junit.Assert;\r\nimport org.openqa.selenium.*;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.support.ui.ExpectedCondition;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.NoSuchElementException;\r\nimport java.util.Set;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class BrowserUtils {\r\n\r\n\r\n    /*\r\n    This method will accept int (in seconds)\r\n and execute Thread,sleep for given duration\r\n      */\r\n\r\n    public static void sleep(int second) {\r\n        second *= 100;\r\n        try {\r\n            Thread.sleep(second);\r\n        } catch (InterruptedException e) {\r\n            System.out.println(\"Something Went Wrong in BrowserUtils\");\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    This method accepts 3 arguments.\r\n    Arg1 is Webdriver\r\n    Arg2 is expected url to confirm\r\n    Arg3 is expected title to confirm\r\n     */\r\n    public static void switchWindowAndVerify(String expectedInUrl, String expectedInTitle){\r\n\r\n        Set<String> allWindowHandles=Driver.getDriver().getWindowHandles();\r\n\r\n        for (String each : allWindowHandles) {\r\n            Driver.getDriver().switchTo().window(each);\r\n            System.out.println(\"Current Url \"+Driver.getDriver().getCurrentUrl());\r\n            if (Driver.getDriver().getCurrentUrl().contains(expectedInUrl)){\r\n                break;\r\n            }\r\n\r\n        }\r\n\r\n        String actualTitle=Driver.getDriver().getTitle();\r\n\r\n        Assert.assertTrue(actualTitle.contains(expectedInTitle));\r\n    }\r\n\r\n    /*\r\n    This method accepts a String \"expectedtitle\" and Asserts if it is true\r\n     */\r\n\r\n    public static void VerifyTitle(String expectedTitle){\r\n\r\n        Assert.assertEquals(Driver.getDriver().getTitle(),expectedTitle);\r\n\r\n\r\n    }\r\n    public static void waitForInvisibilityOf(WebElement webElement){\r\n        Driver.getDriver().manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), 10);\r\n        wait.until(ExpectedConditions.invisibilityOf(webElement));\r\n    }\r\n\r\n    /**\r\n     * This method will accept a String as expected value and verify actual URL CONTAINS the value.\r\n     * @param expectedInURL\r\n     */\r\n     public static void verifyTitleContains(String expectedInURL){\r\nAssert.assertTrue(Driver.getDriver().getCurrentUrl().contains(expectedInURL));\r\n     }\r\n\r\n    /**\r\n     * This method will accept a dropdown as a WebElement and return al the options' text in a list of String.\r\n     * @param dropdownElement\r\n     * @return List<String> actualDropdownAsString\r\n     */\r\n    public static List<String> dropdownOptionsAsString(WebElement dropdownElement){\r\n    Select select=new Select(dropdownElement);\r\n\r\n    List<WebElement> actualOptionsAsWebElement = select.getOptions();\r\n\r\n    List<String> months = new ArrayList<>();\r\n    for (WebElement each : actualOptionsAsWebElement) {\r\n        months.add(each.getText());\r\n    }\r\n    return months;\r\n}\r\n\r\n\r\n    /**\r\n     * it will search attributeValue through radioButtons list and when it finds it will click\r\n     * @param radioButtons\r\n     * @param attributeValue\r\n     */\r\n    public static void clickRadioButton(List<WebElement> radioButtons, String attributeValue){\r\n\r\n\r\n    for (WebElement each : radioButtons) {\r\n        if (each.getAttribute(\"value\").equalsIgnoreCase(attributeValue)){\r\n            each.click();\r\n        }\r\n    }\r\n}\r\n\r\n    /**\r\n     * Switches to new window by the exact title. Returns to original window if target title not found\r\n     * @param targetTitle\r\n     */\r\n    public static void switchToWindow(String targetTitle) {\r\n        String origin = Driver.getDriver().getWindowHandle();\r\n        for (String handle : Driver.getDriver().getWindowHandles()) {\r\n            Driver.getDriver().switchTo().window(handle);\r\n            if (Driver.getDriver().getTitle().equals(targetTitle)) {\r\n                return;\r\n            }\r\n        }\r\n        Driver.getDriver().switchTo().window(origin);\r\n    }\r\n\r\n    /**\r\n     * Moves the mouse to given element\r\n     *\r\n     * @param element on which to hover\r\n     */\r\n    public static void hover(WebElement element) {\r\n        Actions actions = new Actions(Driver.getDriver());\r\n        actions.moveToElement(element).perform();\r\n    }\r\n\r\n    /**\r\n     * return a list of string from a list of elements\r\n     *\r\n     * @param list of webelements\r\n     * @return list of string\r\n     */\r\n    public static List<String> getElementsText(List<WebElement> list) {\r\n        List<String> elemTexts = new ArrayList<>();\r\n        for (WebElement el : list) {\r\n            elemTexts.add(el.getText());\r\n        }\r\n        return elemTexts;\r\n    }\r\n\r\n    /**\r\n     * Extracts text from list of elements matching the provided locator into new List<String>\r\n     *\r\n     * @param locator\r\n     * @return list of strings\r\n     */\r\n    public static List<String> getElementsText(By locator) {\r\n\r\n        List<WebElement> elems = Driver.getDriver().findElements(locator);\r\n        List<String> elemTexts = new ArrayList<>();\r\n\r\n        for (WebElement el : elems) {\r\n            elemTexts.add(el.getText());\r\n        }\r\n        return elemTexts;\r\n    }\r\n\r\n    /**\r\n     * Performs a pause\r\n     *\r\n     * @param seconds\r\n     */\r\n    public static void waitFor(int seconds) {\r\n        try {\r\n            Thread.sleep(seconds * 1000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Waits for the provided element to be visible on the page\r\n     *\r\n     * @param element\r\n     * @param timeToWaitInSec\r\n     * @return\r\n     */\r\n    public static WebElement waitForVisibility(WebElement element, int timeToWaitInSec) {\r\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeToWaitInSec);\r\n        return wait.until(ExpectedConditions.visibilityOf(element));\r\n    }\r\n\r\n    /**\r\n     * Waits for element matching the locator to be visible on the page\r\n     *\r\n     * @param locator\r\n     * @param timeout\r\n     * @return\r\n     */\r\n    public static WebElement waitForVisibility(By locator, int timeout) {\r\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeout);\r\n        return wait.until(ExpectedConditions.visibilityOfElementLocated(locator));\r\n    }\r\n\r\n    /**\r\n     * Waits for provided element to be clickable\r\n     *\r\n     * @param element\r\n     * @param timeout\r\n     * @return\r\n     */\r\n    public static WebElement waitForClickablility(WebElement element, int timeout) {\r\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeout);\r\n        return wait.until(ExpectedConditions.elementToBeClickable(element));\r\n    }\r\n\r\n    /**\r\n     * Waits for element matching the locator to be clickable\r\n     *\r\n     * @param locator\r\n     * @param timeout\r\n     * @return\r\n     */\r\n    public static WebElement waitForClickablility(By locator, int timeout) {\r\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeout);\r\n        return wait.until(ExpectedConditions.elementToBeClickable(locator));\r\n    }\r\n\r\n    /**\r\n     * waits for backgrounds processes on the browser to complete\r\n     *\r\n     * @param timeOutInSeconds\r\n     */\r\n    public static void waitForPageToLoad(long timeOutInSeconds) {\r\n        ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {\r\n            public Boolean apply(WebDriver driver) {\r\n                return ((JavascriptExecutor) driver).executeScript(\"return document.readyState\").equals(\"complete\");\r\n            }\r\n        };\r\n        try {\r\n            WebDriverWait wait = new WebDriverWait(Driver.getDriver(), timeOutInSeconds);\r\n            wait.until(expectation);\r\n        } catch (Throwable error) {\r\n            error.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies whether the element matching the provided locator is displayed on page\r\n     *\r\n     * @param by\r\n     * @throws AssertionError if the element matching the provided locator is not found or not displayed\r\n     */\r\n    public static void verifyElementDisplayed(By by) {\r\n        try {\r\n            Assert.assertTrue(\"Element not visible: \" + by, Driver.getDriver().findElement(by).isDisplayed());\r\n        } catch (NoSuchElementException e) {\r\n            e.printStackTrace();\r\n            Assert.fail(\"Element not found: \" + by);\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies whether the element matching the provided locator is NOT displayed on page\r\n     *\r\n     * @param by\r\n     * @throws AssertionError the element matching the provided locator is displayed\r\n     */\r\n    public static void verifyElementNotDisplayed(By by) {\r\n        try {\r\n            Assert.assertFalse(\"Element should not be visible: \" + by, Driver.getDriver().findElement(by).isDisplayed());\r\n        } catch (NoSuchElementException e) {\r\n            e.printStackTrace();\r\n\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Verifies whether the element is displayed on page\r\n     *\r\n     * @param element\r\n     * @throws AssertionError if the element is not found or not displayed\r\n     */\r\n    public static void verifyElementDisplayed(WebElement element) {\r\n        try {\r\n            Assert.assertTrue(\"Element not visible: \" + element, element.isDisplayed());\r\n        } catch (NoSuchElementException e) {\r\n            e.printStackTrace();\r\n            Assert.fail(\"Element not found: \" + element);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Waits for element to be not stale\r\n     *\r\n     * @param element\r\n     */\r\n    public static void waitForStaleElement(WebElement element) {\r\n        int y = 0;\r\n        while (y <= 15) {\r\n            if (y == 1)\r\n                try {\r\n                    element.isDisplayed();\r\n                    break;\r\n                } catch (StaleElementReferenceException st) {\r\n                    y++;\r\n                    try {\r\n                        Thread.sleep(300);\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                } catch (WebDriverException we) {\r\n                    y++;\r\n                    try {\r\n                        Thread.sleep(300);\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Clicks on an element using JavaScript\r\n     *\r\n     * @param element\r\n     */\r\n    public static void clickWithJS(WebElement element) {\r\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].scrollIntoView(true);\", element);\r\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].click();\", element);\r\n    }\r\n\r\n\r\n    /**\r\n     * Scrolls down to an element using JavaScript\r\n     *\r\n     * @param element\r\n     */\r\n    public static void scrollToElement(WebElement element) {\r\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].scrollIntoView(true);\", element);\r\n    }\r\n\r\n    /**\r\n     * Performs double click action on an element\r\n     *\r\n     * @param element\r\n     */\r\n    public static void doubleClick(WebElement element) {\r\n        new Actions(Driver.getDriver()).doubleClick(element).build().perform();\r\n    }\r\n\r\n    /**\r\n     * Changes the HTML attribute of a Web Element to the given value using JavaScript\r\n     *\r\n     * @param element\r\n     * @param attributeName\r\n     * @param attributeValue\r\n     */\r\n    public static void setAttribute(WebElement element, String attributeName, String attributeValue) {\r\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].setAttribute(arguments[1], arguments[2]);\", element, attributeName, attributeValue);\r\n    }\r\n\r\n    /**\r\n     * Highlighs an element by changing its background and border color\r\n     * @param element\r\n     */\r\n    public static void highlight(WebElement element) {\r\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');\", element);\r\n        waitFor(1);\r\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].removeAttribute('style', 'background: yellow; border: 2px solid red;');\", element);\r\n    }\r\n\r\n    /**\r\n     * Checks or unchecks given checkbox\r\n     *\r\n     * @param element\r\n     * @param check\r\n     */\r\n    public static void selectCheckBox(WebElement element, boolean check) {\r\n        if (check) {\r\n            if (!element.isSelected()) {\r\n                element.click();\r\n            }\r\n        } else {\r\n            if (element.isSelected()) {\r\n                element.click();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * attempts to click on provided element until given time runs out\r\n     *\r\n     * @param element\r\n     * @param timeout\r\n     */\r\n    public static void clickWithTimeOut(WebElement element, int timeout) {\r\n        for (int i = 0; i < timeout; i++) {\r\n            try {\r\n                element.click();\r\n                return;\r\n            } catch (WebDriverException e) {\r\n                waitFor(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * executes the given JavaScript command on given web element\r\n     *\r\n     * @param element\r\n     */\r\n    public static void executeJScommand(WebElement element, String command) {\r\n        JavascriptExecutor jse = (JavascriptExecutor) Driver.getDriver();\r\n        jse.executeScript(command, element);\r\n\r\n    }\r\n\r\n    /**\r\n     * executes the given JavaScript command on given web element\r\n     *\r\n     * @param command\r\n     */\r\n    public static void executeJScommand(String command) {\r\n        JavascriptExecutor jse = (JavascriptExecutor) Driver.getDriver();\r\n        jse.executeScript(command);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * This method will recover in case of exception after unsuccessful the click,\r\n     * and will try to click on element again.\r\n     *\r\n     * @param by\r\n     * @param attempts\r\n     */\r\n    public static void clickWithWait(By by, int attempts) {\r\n        int counter = 0;\r\n        //click on element as many as you specified in attempts parameter\r\n        while (counter < attempts) {\r\n            try {\r\n                //selenium must look for element again\r\n                clickWithJS(Driver.getDriver().findElement(by));\r\n                //if click is successful - then break\r\n                break;\r\n            } catch (WebDriverException e) {\r\n                //if click failed\r\n                //print exception\r\n                //print attempt\r\n                e.printStackTrace();\r\n                ++counter;\r\n                //wait for 1 second, and try to click again\r\n                waitFor(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  checks that an element is present on the DOM of a page. This does not\r\n     *    * necessarily mean that the element is visible.\r\n     * @param by\r\n     * @param time\r\n     */\r\n    public static void waitForPresenceOfElement(By by, long time) {\r\n        new WebDriverWait(Driver.getDriver(), time).until(ExpectedConditions.presenceOfElementLocated(by));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/Bahtiyar/utilities/BrowserUtils.java b/src/test/java/com/Bahtiyar/utilities/BrowserUtils.java
--- a/src/test/java/com/Bahtiyar/utilities/BrowserUtils.java	(revision f6b4df0f7a2aed5a7cae6aa141945e6fbf8fbca0)
+++ b/src/test/java/com/Bahtiyar/utilities/BrowserUtils.java	(date 1677788209846)
@@ -23,7 +23,7 @@
       */
 
     public static void sleep(int second) {
-        second *= 100;
+        second *= 1000;
         try {
             Thread.sleep(second);
         } catch (InterruptedException e) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"df1a34aa-0db4-4e5d-a0c6-ba25e0f37d04\" name=\"Changes\" comment=\"Day2\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/com/Bahtiyar/page/cydeo.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"importingSettings\">\r\n      <MavenImportingSettings>\r\n        <option name=\"workspaceImportEnabled\" value=\"true\" />\r\n      </MavenImportingSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2M9p7BK7mvN118NAclBnRDVcboe\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Muaz Yagci/IdeaProjects/Bahtiyar&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;editor.preferences.fonts.default&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Muaz Yagci\\IdeaProjects\\Bahtiyar\" />\r\n      <recent name=\"C:\\Users\\Muaz Yagci\\IdeaProjects\\Bahtiyar\\src\\test\\java\\com\\Bahtiyar\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"CukesRunner\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Bahtiyar\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.Bahtiyar.runners.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"com.Bahtiyar.runners\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.Bahtiyar.runners.CukesRunner\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.CukesRunner\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"df1a34aa-0db4-4e5d-a0c6-ba25e0f37d04\" name=\"Changes\" comment=\"\" />\r\n      <created>1677189484380</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1677189484380</updated>\r\n      <workItem from=\"1677189485622\" duration=\"2790000\" />\r\n      <workItem from=\"1677192291873\" duration=\"361000\" />\r\n      <workItem from=\"1677244565735\" duration=\"6670000\" />\r\n      <workItem from=\"1677784784507\" duration=\"2880000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Initial Commit\">\r\n      <created>1677189715321</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1677189715321</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Initial Commit 2\">\r\n      <created>1677244883571</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1677244883571</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Initial Commit 2\">\r\n      <created>1677245482378</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1677245482378</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Ilk\">\r\n      <created>1677247545131</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1677247545131</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Day1\">\r\n      <created>1677249632037</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1677249632037</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Day1\">\r\n      <created>1677251187520</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1677251187520</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Day2\">\r\n      <created>1677786625409</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1677786625409</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Initial Commit\" />\r\n    <MESSAGE value=\"Initial Commit 2\" />\r\n    <MESSAGE value=\"Ilk\" />\r\n    <MESSAGE value=\"Day1\" />\r\n    <MESSAGE value=\"Day2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Day2\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f6b4df0f7a2aed5a7cae6aa141945e6fbf8fbca0)
+++ b/.idea/workspace.xml	(date 1677788661302)
@@ -5,8 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="df1a34aa-0db4-4e5d-a0c6-ba25e0f37d04" name="Changes" comment="Day2">
-      <change afterPath="$PROJECT_DIR$/src/test/java/com/Bahtiyar/page/cydeo.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/com/Bahtiyar/utilities/BrowserUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/Bahtiyar/utilities/BrowserUtils.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -100,7 +100,7 @@
       <workItem from="1677189485622" duration="2790000" />
       <workItem from="1677192291873" duration="361000" />
       <workItem from="1677244565735" duration="6670000" />
-      <workItem from="1677784784507" duration="2880000" />
+      <workItem from="1677784784507" duration="3869000" />
     </task>
     <task id="LOCAL-00001" summary="Initial Commit">
       <created>1677189715321</created>
@@ -151,7 +151,14 @@
       <option name="project" value="LOCAL" />
       <updated>1677786625409</updated>
     </task>
-    <option name="localTasksCounter" value="8" />
+    <task id="LOCAL-00008" summary="Day2">
+      <created>1677787867056</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1677787867056</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
